CREATE TABLE IF NOT EXISTS TB_PERMISSAO (
	COD_PERMISSAO SERIAL,
	DESCRICAO VARCHAR(50),
	DATA_INCLUSAO TIMESTAMP,
	DATA_ALTERACAO TIMESTAMP,
	CONSTRAINT pk_permissao PRIMARY KEY(COD_PERMISSAO)
);

-- CREATE OR REPLACE FUNCTION TRG_AUDITORIA() RETURNS TRIGGER AS $trg_audit$
--     BEGIN
--         IF (TG_OP = 'UPDATE') THEN
--             UPDATE TB_PERMISSAO SET DATA_ALTERACAO = NOW() WHERE COD_PERMISSAO = NEW.COD_PERMISSAO;
--         ELSIF (TG_OP = 'INSERT') THEN
--             UPDATE TB_PERMISSAO SET DATA_INCLUSAO = NOW() WHERE COD_PERMISSAO = NEW.COD_PERMISSAO;
--         END IF;
--         RETURN NULL; 
--     END;
-- $trg_audit$ LANGUAGE plpgsql;

-- CREATE TRIGGER trg_audit
-- AFTER INSERT OR UPDATE ON TB_PERMISSAO
--     FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA();

INSERT INTO TB_PERMISSAO (COD_PERMISSAO, DESCRICAO) VALUES (777666, 'ADMIN');
INSERT INTO TB_PERMISSAO (COD_PERMISSAO, DESCRICAO) VALUES (777667, 'ESTUDANTE');
INSERT INTO TB_PERMISSAO (COD_PERMISSAO, DESCRICAO) VALUES (777668, 'EMPRESA');