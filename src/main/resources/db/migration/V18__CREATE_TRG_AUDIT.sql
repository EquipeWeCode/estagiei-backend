CREATE OR REPLACE FUNCTION TRG_AUDITORIA_USUARIO() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_USUARIO SET DATA_ALTERACAO = NOW() WHERE COD_USUARIO = NEW.COD_USUARIO;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_USUARIO SET DATA_INCLUSAO = NOW() WHERE COD_USUARIO = NEW.COD_USUARIO;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_USUARIO
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_USUARIO();

CREATE OR REPLACE FUNCTION TRG_AUDITORIA_ENDERECO() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_ENDERECO SET DATA_ALTERACAO = NOW() WHERE COD_ENDERECO = NEW.COD_ENDERECO;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_ENDERECO SET DATA_INCLUSAO = NOW() WHERE COD_ENDERECO = NEW.COD_ENDERECO;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_ENDERECO
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_ENDERECO();
	
CREATE OR REPLACE FUNCTION TRG_AUDITORIA_PESSOA() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_PESSOA SET DATA_ALTERACAO = NOW() WHERE COD_PESSOA = NEW.COD_PESSOA;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_PESSOA SET DATA_INCLUSAO = NOW() WHERE COD_PESSOA = NEW.COD_PESSOA;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_PESSOA
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_PESSOA();

CREATE OR REPLACE FUNCTION TRG_AUDITORIA_ESTUDANTE() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_ESTUDANTE SET DATA_ALTERACAO = NOW() WHERE COD_ESTUDANTE = NEW.COD_ESTUDANTE;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_ESTUDANTE SET DATA_INCLUSAO = NOW() WHERE COD_ESTUDANTE = NEW.COD_ESTUDANTE;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_ESTUDANTE
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_ESTUDANTE();
	
CREATE OR REPLACE FUNCTION TRG_AUDITORIA_EMPRESA() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_EMPRESA SET DATA_ALTERACAO = NOW() WHERE COD_EMPRESA = NEW.COD_EMPRESA;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_EMPRESA SET DATA_INCLUSAO = NOW() WHERE COD_EMPRESA = NEW.COD_EMPRESA;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_EMPRESA
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_EMPRESA();

CREATE OR REPLACE FUNCTION TRG_AUDITORIA_VAGA() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_VAGA SET DATA_ALTERACAO = NOW() WHERE COD_VAGA = NEW.COD_VAGA;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_VAGA SET DATA_INCLUSAO = NOW() WHERE COD_VAGA = NEW.COD_VAGA;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_VAGA
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_VAGA();
	
CREATE OR REPLACE FUNCTION TRG_AUDITORIA_COMPETENCIA() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_COMPETENCIA SET DATA_ALTERACAO = NOW() WHERE COD_COMPETENCIA = NEW.COD_COMPETENCIA;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_COMPETENCIA SET DATA_INCLUSAO = NOW() WHERE COD_COMPETENCIA = NEW.COD_COMPETENCIA;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_COMPETENCIA
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_COMPETENCIA();
	
CREATE OR REPLACE FUNCTION TRG_AUDITORIA_PERMISSAO() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_PERMISSAO SET DATA_ALTERACAO = NOW() WHERE COD_PERMISSAO = NEW.COD_PERMISSAO;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_PERMISSAO SET DATA_INCLUSAO = NOW() WHERE COD_PERMISSAO = NEW.COD_PERMISSAO;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_PERMISSAO
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_PERMISSAO();
	
CREATE OR REPLACE FUNCTION TRG_AUDITORIA_HIST() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_HIST_ESCOLAR SET DATA_ALTERACAO = NOW() WHERE COD_HIST_ESCOLAR = NEW.COD_HIST_ESCOLAR;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_HIST_ESCOLAR SET DATA_INCLUSAO = NOW() WHERE COD_HIST_ESCOLAR = NEW.COD_HIST_ESCOLAR;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_HIST_ESCOLAR
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_HIST();
	
CREATE OR REPLACE FUNCTION TRG_AUDITORIA_USUPERM() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_USU_PERM SET DATA_ALTERACAO = NOW() WHERE COD_PERMISSAO = NEW.COD_PERMISSAO;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_USU_PERM SET DATA_INCLUSAO = NOW() WHERE COD_PERMISSAO = NEW.COD_PERMISSAO;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_USU_PERM
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_USUPERM();
	
CREATE OR REPLACE FUNCTION TRG_AUDITORIA_CONTATO() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_CONTATO SET DATA_ALTERACAO = NOW() WHERE COD_CONTATO = NEW.COD_CONTATO;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_CONTATO SET DATA_INCLUSAO = NOW() WHERE COD_CONTATO = NEW.COD_CONTATO;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_CONTATO
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_CONTATO();
	
CREATE OR REPLACE FUNCTION TRG_AUDITORIA_REPRESENTANTE() RETURNS TRIGGER AS $trg_audit$
    BEGIN
        IF (TG_OP = 'UPDATE') THEN
            UPDATE TB_REPRESENTANTE SET DATA_ALTERACAO = NOW() WHERE COD_REPRESENTANTE = NEW.COD_REPRESENTANTE;
        ELSIF (TG_OP = 'INSERT') THEN
            UPDATE TB_REPRESENTANTE SET DATA_INCLUSAO = NOW() WHERE COD_REPRESENTANTE = NEW.COD_REPRESENTANTE;
        END IF;
        RETURN NULL; 
    END;
$trg_audit$ LANGUAGE plpgsql;

CREATE TRIGGER trg_audit
BEFORE INSERT OR UPDATE ON TB_REPRESENTANTE
    FOR EACH ROW EXECUTE FUNCTION TRG_AUDITORIA_REPRESENTANTE();